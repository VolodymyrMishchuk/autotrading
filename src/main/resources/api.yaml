openapi: 3.0.3
info:
  title: Autotrading Backend API
  description: |
    API for managing users (ROLE_SUPER-ADMIN, ROLE_ADMIN, ROLE_CUSTOMER), accounts, sources, transactions
    with email-confirmed registration and role-based access control.
  version: 1.2.1

servers:
  - url: https://localhost:8080
    description: Local Development Server

tags:
  - name: Auth
    description: Operations for sign up/in and registration flow
  - name: Users
    description: Operations for managing users (ROLE_CUSTOMER/ROLE_ADMIN/ROLE_SUPER-ADMIN)
  - name: Accounts
    description: Operations with user accounts
  - name: Sources
    description: Signal sources for autotrading
  - name: Transactions
    description: Transactions related to accounts
  - name: Cabinets
    description: Trading cabinets and their lifecycle
  - name: CabinetSources
    description: Manage linking and status of sources in cabinets

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string, format: email }
        phone_number: { type: string }
        birth_date: { type: string, format: date }
        role:
          type: string
          enum: [ROLE_CUSTOMER, ROLE_ADMIN, ROLE_SUPER-ADMIN]
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED, PENDING_CONFIRMATION]

    UserCreateDto:
      type: object
      required:
        - first_name
        - last_name
        - email
        - phone_number
        - birth_date
        - password
      properties:
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
        phone_number:
          type: string
          pattern: '^\+?[0-9]{7,15}$'
        birth_date:
          type: string
          format: date
        password:
          type: string
          format: password
          minLength: 8

    UserCompleteRegistrationDto:
      type: object
      required:
        - email
        - confirmation_token
      properties:
        email:
          type: string
          format: email
        confirmation_token:
          type: string

    UserUpdate:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string, format: email }
        phone_number: { type: string }
        birth_date: { type: string, format: date }
        role:
          type: string
          enum: [ROLE_CUSTOMER, ROLE_ADMIN, ROLE_SUPER-ADMIN]
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]
        password: { type: string, format: password }

    AuthLogin:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    AuthToken:
      type: object
      properties:
        access_token: { type: string }
        token_type:
          type: string
          enum: [bearer]
          default: bearer

    Account:
      type: object
      properties:
        id: { type: string, format: uuid }
        balance: { type: number, format: double }
        currency: { type: string }
        number:
          type: string
          description: Unique account number (e.g. MetaTrader ID)
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        person_id: { type: string, format: uuid }
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]

    AccountCreate:
      type: object
      required: [token_MetaTradeAPI, person_id]
      properties:
        token_MetaTradeAPI: { type: string }
        person_id: { type: string, format: uuid }

    AccountUpdate:
      type: object
      properties:
        currency: { type: string }
        token_MetaTradeAPI: { type: string }
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]

    AccountCredentialsDto:
      type: object
      required:
        - account_id
        - token_meta_trade_api
      properties:
        account_id:
          type: string
          format: uuid
        token_meta_trade_api:
          type: string

    Source:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        platform: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]

    SourceCreate:
      type: object
      required: [name, platform, token]
      properties:
        name: { type: string }
        platform: { type: string }
        token: { type: string }

    SourceUpdate:
      type: object
      properties:
        name: { type: string }
        platform: { type: string }
        token: { type: string }
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]

    Transaction:
      type: object
      properties:
        id: { type: string, format: uuid }
        amount: { type: number, format: double, minimum: 0 }
        direction:
          type: string
          enum: [BUY, SELL]
        account_id: { type: string, format: uuid }
        source_id: { type: string, format: uuid }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    TransactionCreate:
      type: object
      required: [amount, direction, account_id, source_id]
      properties:
        amount: { type: number, format: double, minimum: 0 }
        direction:
          type: string
          enum: [BUY, SELL]
        account_id: { type: string, format: uuid }
        source_id: { type: string, format: uuid }

    TransactionUpdate:
      type: object
      properties:
        amount: { type: number, format: double, minimum: 0 }
        direction:
          type: string
          enum: [BUY, SELL]
        source_id: { type: string, format: uuid }

    CabinetCreateDto:
      type: object
      required:
        - name
        - meta_trade_token
        - account_id
        - source_ids
      properties:
        name:
          type: string
        meta_trade_token:
          type: string
        account_id:
          type: string
          format: uuid
        source_ids:
          type: array
          items:
            type: string
            format: uuid

    CabinetUpdateDto:
      type: object
      properties:
        name:
          type: string
        meta_trade_token:
          type: string
        status:
          type: string
        source_ids:
          type: array
          items:
            type: string
            format: uuid

    CabinetDetailDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        meta_trade_token:
          type: string
        status:
          type: string
        user_id:
          type: string
          format: uuid
        account_id:
          type: string
          format: uuid
        source_ids:
          type: array
          items:
            type: string
            format: uuid

    CabinetSourceDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cabinet_id:
          type: string
          format: uuid
        source_id:
          type: string
          format: uuid
        status:
          type: string

    CabinetSourceStatusUpdateDto:
      type: object
      properties:
        status:
          type: string

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: Register new user and send confirmation token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        '201':
          description: User created; confirmation email sent
        '400':
          description: Invalid input

  /auth/signup/confirm:
    post:
      tags: [Auth]
      summary: Complete registration by confirming email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCompleteRegistrationDto'
      responses:
        '200':
          description: Email confirmed, user activated
        '400':
          description: Invalid or expired token

  /auth/login:
    post:
      tags: [Auth]
      summary: Log in and receive JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Unauthorized

  /users:
    get:
      tags: [Users]
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      tags: [Users]
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated

    delete:
      tags: [Users]
      summary: Delete user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: User deleted

  /accounts:
    get:
      tags: [Accounts]
      summary: Get all accounts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'

    post:
      tags: [Accounts]
      summary: Create new account
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
      responses:
        '201':
          description: Account created

  /accounts/{id}:
    get:
      tags: [Accounts]
      summary: Get account by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Account not found

    put:
      tags: [Accounts]
      summary: Update account
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '200':
          description: Account updated

    delete:
      tags: [Accounts]
      summary: Delete account
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Account deleted

  /accounts/{id}/credentials:
    get:
      tags: [Accounts]
      summary: Get MetaTrade API token for account
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Token retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCredentialsDto'
        '403':
          description: Forbidden
        '404':
          description: Account not found

  /sources:
    get:
      tags: [Sources]
      summary: Get all sources
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of sources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'

    post:
      tags: [Sources]
      summary: Create source
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceCreate'
      responses:
        '201':
          description: Source created

  /sources/{id}:
    get:
      tags: [Sources]
      summary: Get source by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Source found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '404':
          description: Source not found

    put:
      tags: [Sources]
      summary: Update source
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceUpdate'
      responses:
        '200':
          description: Source updated

    delete:
      tags: [Sources]
      summary: Delete source
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Source deleted

  /transactions:
    get:
      tags: [Transactions]
      summary: Get all transactions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'

    post:
      tags: [Transactions]
      summary: Create transaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction created

  /transactions/{id}:
    get:
      tags: [Transactions]
      summary: Get transaction by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found