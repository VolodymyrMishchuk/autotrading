openapi: 3.0.3
info:
  title: Autotrading Backend API
  description: |
    API for managing users (ROLE_SUPER-ADMIN, ROLE_ADMIN, ROLE_CUSTOMER), accounts, sources, transactions
    with email-confirmed registration and role-based access control.
  version: 1.2.1

servers:
  - url: https://localhost:8080
    description: Local Development Server

tags:
  - name: Auth
    description: Operations for sign up/in and registration flow
  - name: Users
    description: Operations for managing users (ROLE_CUSTOMER/ROLE_ADMIN/ROLE_SUPER_ADMIN)
  - name: Accounts
    description: Operations with user accounts
  - name: Sources
    description: Signal sources for autotrading
  - name: Transactions
    description: Transactions related to accounts
  - name: Cabinets
    description: Trading cabinets and their lifecycle
  - name: CabinetSources
    description: Manage linking and status of sources in cabinets

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string, format: email }
        phone_number: { type: string }
        birth_date: { type: string, format: date }
        role:
          type: string
          enum: [ROLE_CUSTOMER, ROLE_ADMIN, ROLE_SUPER-ADMIN]
        status:
          type: string
          enum: [PENDING, ACTIVE, INACTIVE, BLOCKED]

    UserCreateDto:
      type: object
      required:
        - first_name
        - last_name
        - email
        - phone_number
        - birth_date
        - password
      properties:
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
        phone_number:
          type: string
          pattern: '^\+?[0-9]{7,15}$'
        birth_date:
          type: string
          format: date
        password:
          type: string
          format: password
          minLength: 8

    PhoneNumberChangeDto:
      type: object
      required: [ old_phone_number, new_phone_number ]
      properties:
        old_phone_number: { type: string, pattern: '^\+?[0-9]{7,15}$' }
        new_phone_number: { type: string, pattern: '^\+?[0-9]{7,15}$' }

    PhoneNumberResetRequestDto:
      type: object
      required: [ email ]
      properties:
        email: { type: string, format: email }

    PhoneNumberResetCompleteDto:
      type: object
      required: [ token, phone_number ]
      properties:
        token: { type: string }
        phone_number: { type: string, pattern: '^\+?[0-9]{7,15}$' }

    PasswordChangeDto:
      type: object
      required: [ old_password, new_password ]
      properties:
        old_password: { type: string, format: password, minLength: 8 }
        new_password: { type: string, format: password, minLength: 8 }

    PasswordResetRequestDto:
      type: object
      required: [ email ]
      properties:
        email: { type: string, format: email }

    PasswordResetCompleteDto:
      type: object
      required: [ token, password ]
      properties:
        token: { type: string }
        password: { type: string, format: password, minLength: 8 }

    EmailChangeDto:
      type: object
      required: [ old_email, new_email ]
      properties:
        old_email: { type: string, format: email }
        new_email: { type: string, format: email }

    EmailResetRequestDto:
      type: object
      required: [ phone_number ]
      properties:
        phone_number: { type: string, pattern: '^\+?[0-9]{7,15}$' }

    EmailResetCompleteDto:
      type: object
      required: [ verification_code_by_sms, email ]
      properties:
        verification_code_by_sms: { type: string }
        email: { type: string, format: email }

    StatusChangeDto:
      type: object
      required: [ new_status ]
      properties:
        new_status:
          type: string
          enum: [ PENDING, ACTIVE, INACTIVE, BLOCKED ]

    RoleChangeDto:
      type: object
      required: [ new_role ]
      properties:
        new_role:
          type: string
          enum: [ ROLE_CUSTOMER, ROLE_ADMIN, ROLE_SUPER_ADMIN ]

    UserCompleteRegistrationDto:
      type: object
      required:
        - email
        - confirmation_token
      properties:
        email:
          type: string
          format: email
        confirmation_token:
          type: string

    UserUpdate:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string, format: email }
        phone_number: { type: string }
        birth_date: { type: string, format: date }
        role:
          type: string
          enum: [ROLE_CUSTOMER, ROLE_ADMIN, ROLE_SUPER-ADMIN]
        status:
          type: string
          enum: [PENDING, ACTIVE, INACTIVE, BLOCKED]
        password: { type: string, format: password }

    AuthLogin:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    AuthToken:
      type: object
      properties:
        access_token: { type: string }
        token_type:
          type: string
          enum: [bearer]
          default: bearer

    Account:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        account_type:
          type: string
          enum: [ PERSONAL, BUSINESS ]
        status:
          type: string
          enum: [ PENDING, ACTIVE, INACTIVE, BLOCKED ]
        balance:
          type: number
          format: double
        user_id:
          type: string
          format: uuid
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    AccountCreateDto:
      type: object
      required: [ name, account_type ]
      properties:
        name:
          type: string
        account_type:
          type: string
          enum: [ PERSONAL, BUSINESS ]
        user_id:
          type: string
          format: uuid
          description: Optional; admin-only if creating for another user

    AccountUpdate:
      type: object
      properties:
        name: { type: string }
        status:
          type: string
          enum: [ ACTIVE, INACTIVE, DEACTIVATED, BLOCKED ]

    AccountCredentialsDto:
      type: object
      required:
        - account_id
      properties:
        account_id:
          type: string
          format: uuid
        name:
          type: string
        account_type:
          type: string
          enum: [ PERSONAL, BUSINESS ]
        user_id:
          type: string
          format: uuid

    AccountStatusUpdate:
      type: object
      required: [ status ]
      properties:
        status:
          type: string
          enum: [ PENDING, ACTIVE, INACTIVE, BLOCKED ]

    AccountCreateSelfDto:
      type: object
      required: [ name, account_type ]
      properties:
        name: { type: string }
        account_type:
          type: string
          enum: [ PERSONAL, BUSINESS ]

    AccountCreateAdminDto:
      type: object
      required: [ name, account_type, user_id ]
      properties:
        name: { type: string }
        account_type:
          type: string
          enum: [ PERSONAL, BUSINESS ]
        user_id:
          type: string
          format: uuid

    Source:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        platform: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]

    SourceCreate:
      type: object
      required: [name, platform, token]
      properties:
        name: { type: string }
        platform: { type: string }
        token: { type: string }

    SourceUpdate:
      type: object
      properties:
        name: { type: string }
        platform: { type: string }
        token: { type: string }
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]

    Transaction:
      type: object
      properties:
        id: { type: string, format: uuid }
        amount: { type: number, format: double, minimum: 0 }
        direction:
          type: string
          enum: [BUY, SELL]
        account_id: { type: string, format: uuid }
        source_id: { type: string, format: uuid }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    TransactionCreate:
      type: object
      required: [amount, direction, account_id, source_id]
      properties:
        amount: { type: number, format: double, minimum: 0 }
        direction:
          type: string
          enum: [BUY, SELL]
        account_id: { type: string, format: uuid }
        source_id: { type: string, format: uuid }

    TransactionUpdate:
      type: object
      properties:
        amount: { type: number, format: double, minimum: 0 }
        direction:
          type: string
          enum: [BUY, SELL]
        source_id: { type: string, format: uuid }

    CabinetCreateDto:
      type: object
      required:
        - name
        - meta_trade_token
        - account_id
        - user_id
        - source_ids
      properties:
        name:
          type: string
        meta_trade_token:
          type: string
        account_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        source_ids:
          type: array
          items:
            type: string
            format: uuid

    CabinetUpdateDto:
      type: object
      required:
        - name
        - meta_trade_token
        - status
        - source_ids
      properties:
        name:
          type: string
        meta_trade_token:
          type: string
        status:
          type: string
        source_ids:
          type: array
          items:
            type: string
            format: uuid

    CabinetDetailDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        meta_trade_token:
          type: string
        status:
          type: string
        user_id:
          type: string
          format: uuid
        account_id:
          type: string
          format: uuid
        source_ids:
          type: array
          items:
            type: string
            format: uuid

    CabinetSourceDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cabinet_id:
          type: string
          format: uuid
        source_id:
          type: string
          format: uuid
        status:
          type: string

    CabinetSourceStatusUpdateDto:
      type: object
      properties:
        status:
          type: string

    RefreshTokenRequestDto:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Refresh token (UUID)

    AuthTokenResponseDto:
      type: object
      required:
        - access_token
        - refresh_token
        - token_type
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: Refresh token (UUID)
        token_type:
          type: string
          enum: [ bearer ]
          default: bearer

    ResendVerificationRequestDto:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: Register new user and send confirmation token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        '201':
          description: User created; confirmation email sent
        '400':
          description: Invalid input

  /auth/signup/confirm:
    post:
      tags: [Auth]
      summary: Complete registration by confirming email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCompleteRegistrationDto'
      responses:
        '200':
          description: Email confirmed, user activated
        '400':
          description: Invalid or expired token

  /auth/login:
    post:
      tags: [ Auth ]
      summary: Log in and receive JWT access and refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponseDto'
        '401':
          description: Unauthorized

  /auth/refresh:
    post:
      tags: [ Auth ]
      summary: Refresh JWT access and refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDto'
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponseDto'
        '401':
          description: Invalid or expired refresh token

  /auth/logout:
    post:
      tags: [ Auth ]
      summary: Logout and invalidate refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDto'
      responses:
        '204':
          description: Successfully logged out
        '401':
          description: Invalid refresh token

  /auth/resend-verification:
    post:
      tags: [ Auth ]
      summary: Resend email verification for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequestDto'
      responses:
        '200':
          description: Verification email resent (or account already active, or email not found)
          content:
            application/json:
              schema:
                type: string

  /users:
    get:
      tags: [Users]
      summary: Get all users
      security:
        - bearerAuth: []
      x-roles:
        - ROLE_ADMIN
        - ROLE_SUPER_ADMIN
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      tags: [Users]
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated

    delete:
      tags: [Users]
      summary: Delete user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: User deleted

  /users/{id}/phone/change:
    patch:
      tags: [ Users ]
      summary: Change phone number (old -> new)
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PhoneNumberChangeDto' }
      responses:
        '200':
          description: Phone updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '403': { description: Forbidden }
        '404': { description: User not found }

  /users/phone/reset/request:
    post:
      tags: [ Users ]
      summary: Request phone reset when old phone is unknown (verify via email)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PhoneNumberResetRequestDto' }
      responses:
        '202': { description: If email exists, a reset link is sent }

  /users/phone/reset/complete:
    post:
      tags: [ Users ]
      summary: Complete phone reset with token from email
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PhoneNumberResetCompleteDto' }
      responses:
        '204': { description: Phone reset completed }
        '400': { description: Invalid or expired token }

  /users/{id}/password/change:
    patch:
      tags: [ Users ]
      summary: Change password (old -> new)
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PasswordChangeDto' }
      responses:
        '204': { description: Password changed }
        '403': { description: Forbidden }
        '404': { description: User not found }

  /users/password/reset/request:
    post:
      tags: [ Users ]
      summary: Request password reset (forgot password)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PasswordResetRequestDto' }
      responses:
        '202': { description: If email exists, a reset link is sent }

  /users/password/reset/complete:
    post:
      tags: [ Users ]
      summary: Complete password reset with token from email
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PasswordResetCompleteDto' }
      responses:
        '204': { description: Password reset completed }
        '400': { description: Invalid or expired token }

  /users/{id}/email/change:
    patch:
      tags: [ Users ]
      summary: Change email (old -> new)
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EmailChangeDto' }
      responses:
        '200':
          description: Email updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '403': { description: Forbidden }
        '404': { description: User not found }

  /users/email/reset/request:
    post:
      tags: [ Users ]
      summary: Request email reset when email is unknown (verify via SMS to phone)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EmailResetRequestDto' }
      responses:
        '202': { description: If phone exists, an SMS with code is sent }

  /users/email/reset/complete:
    post:
      tags: [ Users ]
      summary: Complete email reset with SMS verification code
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EmailResetCompleteDto' }
      responses:
        '204': { description: Email reset completed }
        '400': { description: Invalid or expired verification }

  /users/{id}/status:
    patch:
      tags: [ Users ]
      summary: Change user status (ADMIN/SUPER_ADMIN)
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StatusChangeDto' }
      responses:
        '200':
          description: Status updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '403': { description: Forbidden }
        '404': { description: User not found }

  /users/{id}/role:
    patch:
      tags: [ Users ]
      summary: Change user role (ADMIN/SUPER_ADMIN)
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleChangeDto' }
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '403': { description: Forbidden }
        '404': { description: User not found }

  /accounts:
    post:
      tags: [ Accounts ]
      summary: Create account for current user (self)
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateSelfDto'
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
    get:
      tags: [ Accounts ]
      summary: Get all accounts (admin only)
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'

  /accounts/admin:
    post:
      tags: [ Accounts ]
      summary: Create account for specific user (admin)
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateAdminDto'
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'

  /accounts/my:
    get:
      tags: [ Accounts ]
      summary: Get current user's accounts
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of accounts for current user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'

  /accounts/{id}:
    get:
      tags: [Accounts]
      summary: Get account by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Account not found

    put:
      tags: [Accounts]
      summary: Update account
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '200':
          description: Account updated

    delete:
      tags: [Accounts]
      summary: Delete account
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Account deleted

  /accounts/{id}/credentials:
    get:
      tags: [Accounts]
      summary: Get MetaTrade API token for account
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Token retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCredentialsDto'
        '403':
          description: Forbidden
        '404':
          description: Account not found

  /accounts/{id}/status:
    patch:
      tags: [ Accounts ]
      summary: Change account status (ADMIN/SUPER_ADMIN only)
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountStatusUpdate'
      responses:
        '200':
          description: Account status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          description: Forbidden
        '404':
          description: Not found

  /sources:
    get:
      tags: [Sources]
      summary: Get all sources
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of sources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'

    post:
      tags: [Sources]
      summary: Create source
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceCreate'
      responses:
        '201':
          description: Source created

  /sources/{id}:
    get:
      tags: [Sources]
      summary: Get source by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Source found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '404':
          description: Source not found

    put:
      tags: [Sources]
      summary: Update source
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceUpdate'
      responses:
        '200':
          description: Source updated

    delete:
      tags: [Sources]
      summary: Delete source
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Source deleted

  /sources/by-token/{token}:
    get:
      tags: [ Sources ]
      summary: Get source by MetaTrade token (ADMIN/ SUPER_ADMIN only)
      security:
        - bearerAuth: [ ]
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Source found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '404':
          description: Source not found
        '403':
          description: Forbidden

  /transactions:
    post:
      tags: [Transactions]
      summary: Create transaction
      security:
        - bearerAuth: []
      x-roles:
        - ROLE_CUSTOMER  # власник
        - ROLE_SUPER_ADMIN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '403':
          description: Forbidden

    get:
      tags: [Transactions]
      summary: Get all transactions
      security:
        - bearerAuth: []
      x-roles:
        - ROLE_ADMIN
        - ROLE_SUPER_ADMIN
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '403':
          description: Forbidden

  /transactions/{id}:
    get:
      tags: [Transactions]
      summary: Get transaction by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      x-roles:
        - ROLE_CUSTOMER
        - ROLE_ADMIN
        - ROLE_SUPER_ADMIN
      responses:
        '200':
          description: Transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
        '403':
          description: Forbidden

  /cabinets:
    post:
      tags: [Cabinets]
      summary: Create a new cabinet
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CabinetCreateDto'
      responses:
        '200':
          description: Cabinet created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CabinetDetailDto'

  /cabinets/{cabinetId}:
    get:
      tags: [Cabinets]
      summary: Get cabinet by ID
      security:
        - bearerAuth: []
      parameters:
        - name: cabinetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Cabinet detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CabinetDetailDto'

    put:
      tags: [ Cabinets ]
      summary: Update cabinet
      security:
        - bearerAuth: [ ]
      parameters:
        - name: cabinetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CabinetUpdateDto'
      responses:
        '200':
          description: Cabinet updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CabinetDetailDto'

    delete:
      tags: [Cabinets]
      summary: Delete cabinet
      security:
        - bearerAuth: []
      parameters:
        - name: cabinetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Cabinet deleted

  /cabinets/by-user/{userId}:
    get:
      tags: [Cabinets]
      summary: Get cabinets by user ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of cabinets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CabinetDetailDto'

  /cabinets/by-account/{accountId}:
    get:
      tags: [Cabinets]
      summary: Get cabinets by account ID
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of cabinets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CabinetDetailDto'

  /cabinets/{cabinetId}/sources:
    get:
      tags: [CabinetSources]
      summary: Get all sources linked to cabinet
      security:
        - bearerAuth: []
      parameters:
        - name: cabinetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Cabinet sources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CabinetSourceDto'

  /cabinets/{cabinetId}/sources/{sourceId}:
    post:
      tags: [CabinetSources]
      summary: Add source to cabinet
      security:
        - bearerAuth: []
      parameters:
        - name: cabinetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Source linked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CabinetSourceDto'

    patch:
      tags: [CabinetSources]
      summary: Update status of source in cabinet
      security:
        - bearerAuth: []
      parameters:
        - name: cabinetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CabinetSourceStatusUpdateDto'
      responses:
        '200':
          description: Status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CabinetSourceDto'

    delete:
      tags: [CabinetSources]
      summary: Remove source from cabinet
      security:
        - bearerAuth: []
      parameters:
        - name: cabinetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Source removed
