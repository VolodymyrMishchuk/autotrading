openapi: 3.0.3
info:
  title: Autotrading Backend API
  description: |
    API for managing users (ROLE_SUPER-ADMIN, ROLE_ADMIN, ROLE_CUSTOMER), accounts, sources, transactions
    with email-confirmed registration and role-based access control.
  version: 1.2.0

servers:
  - url: https://localhost:8080
    description: Local Development Server

tags:
  - name: Auth
    description: Operations for sign up/in and registration flow
  - name: Users
    description: Operations for managing users (ROLE_CUSTOMER/ROLE_ADMIN/ROLE_SUPER-ADMIN)
  - name: Accounts
    description: Operations with user accounts
  - name: Sources
    description: Signal sources for autotrading
  - name: Transactions
    description: Transactions related to accounts

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string, format: email }
        phone_number: { type: string }
        birth_date: { type: string, format: date }
        role:
          type: string
          enum: [ROLE_CUSTOMER, ROLE_ADMIN, ROLE_SUPER-ADMIN]
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED, PENDING_CONFIRMATION]

    UserCreateRequest:
      type: object
      required: [first_name, last_name, email, phone_number, birth_date, password]
      properties:
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string, format: email }
        phone_number: { type: string }
        birth_date: { type: string, format: date }
        password: { type: string, format: password }

    UserUpdate:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string, format: email }
        phone_number: { type: string }
        birth_date: { type: string, format: date }
        role:
          type: string
          enum: [ROLE_CUSTOMER, ROLE_ADMIN, ROLE_SUPER-ADMIN]
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]
        password: { type: string, format: password }

    AuthLogin:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    AuthToken:
      type: object
      properties:
        access_token: { type: string }
        token_type:
          type: string
          enum: [bearer]
          default: bearer

    Account:
      type: object
      properties:
        id: { type: string, format: uuid }
        balance: { type: number, format: double }
        currency: { type: string }
        number: { type: integer }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        person_id: { type: string, format: uuid }
        source_id: { type: string, format: uuid }
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]

    AccountCreate:
      type: object
      required: [token_MetaTradeAPI, source_id, person_id]
      properties:
        token_MetaTradeAPI: { type: string }
        source_id: { type: string, format: uuid }
        person_id: { type: string, format: uuid }

    AccountUpdate:
      type: object
      properties:
        currency: { type: string }
        token_MetaTradeAPI: { type: string }
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]

    Source:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        platform: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        status:
          type: string
          enum: [ACTIVE, DEACTIVATED]

    SourceCreate:
      type: object
      required: [name, platform, token]
      properties:
        name: { type: string }
        platform: { type: string }
        token: { type: string }

    SourceUpdate:
      type: object
      properties:
        name: { type: string }
        platform: { type: string }
        token: { type: string }
        status:
          type: string
          enum: [active, deactivated]

    Transaction:
      type: object
      properties:
        id: { type: string, format: uuid }
        amount: { type: number, format: double, minimum: 0 }
        direction: { type: string }
        account_id: { type: string, format: uuid }
        source_id: { type: string, format: uuid }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    TransactionCreate:
      type: object
      required: [amount, direction, account_id, source_id]
      properties:
        amount: { type: number, format: double, minimum: 0 }
        direction: { type: string }
        account_id: { type: string, format: uuid }
        source_id: { type: string, format: uuid }

paths:

  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user with password (email confirmation required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '200':
          description: Confirmation email sent with activation link

  /auth/confirm-email:
    get:
      tags: [Auth]
      summary: Confirm email using token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email confirmed, account activated
        '400':
          description: Invalid or expired token

  /auth/login:
    post:
      tags: [Auth]
      summary: Authenticate a user and get a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Invalid credentials

  # Users
  /users:
    get:
      tags: [Users]
      summary: List all users
      security: [ { bearerAuth: [ ] } ]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '204':
          description: No users found

    put:
      tags: [Users]
      summary: Update a user
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '204':
          description: User updated
        '403':
          description: Unauthorized

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user details
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      tags: [Users]
      summary: Delete user
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: User deleted
        '403':
          description: Unauthorized

  # Accounts
  /accounts:
    post:
      tags: [Accounts]
      summary: Create an account
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
      responses:
        '201':
          description: Account created

    get:
      tags: [Accounts]
      summary: List all accounts
      security: [ { bearerAuth: [ ] } ]
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '204':
          description: No accounts found

    put:
      tags: [Accounts]
      summary: Update account
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '204':
          description: Account updated

  /accounts/{id}:
    get:
      tags: [Accounts]
      summary: Get account details
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Account not found

    delete:
      tags: [Accounts]
      summary: Delete account
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Account deleted

  # Sources
  /sources:
    post:
      tags: [Sources]
      summary: Create a source
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceCreate'
      responses:
        '201':
          description: Source created

    get:
      tags: [Sources]
      summary: List all sources
      security: [ { bearerAuth: [ ] } ]
      responses:
        '200':
          description: List of sources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        '204':
          description: No sources found

    put:
      tags: [Sources]
      summary: Update source
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceUpdate'
      responses:
        '204':
          description: Source updated

  /sources/{id}:
    get:
      tags: [Sources]
      summary: Get source details
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Source details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '404':
          description: Source not found

    delete:
      tags: [Sources]
      summary: Delete source
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Source deleted

  # Transactions
  /transactions:
    post:
      tags: [Transactions]
      summary: Create a transaction
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction created

    get:
      tags: [Transactions]
      summary: List all transactions
      security: [ { bearerAuth: [ ] } ]
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '204':
          description: No transactions found

  /transactions/{id}:
    get:
      tags: [Transactions]
      summary: Get transaction details
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
